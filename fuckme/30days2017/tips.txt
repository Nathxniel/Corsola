what ive learned from this challenge


  GENERAL: always think of the minimum amount of information 
           you need to compute the answer in all cases.
           This will help to minimise compilation time in general




-- <$> is essentially zipWith $
  -- it just applies a function to something with a monadic wrapper
  -- so reverse <$> 'IO' "hello" gives 'IO' "olleh"
  -- (the return monad type is the same as the second arguments)

-- interact is fucking magical
  -- interact f does this:
  -- f <$> getLine >>= putStrLn

-- (>>=) is 'strip' (of the monadic protective layer)
  -- Just 64 >>= half >>= half >>= half
  -- strips Just 64 of the Just and puts it into the next function

-- (>>) is strip of ()
  -- 'IO' () >> someFunc
  -- doesnt pass anything into someFunc (passes () which does nothing)

-- it seems you can't switch between IO and Maybe in a do block
  -- (>>=) doesnt allow you to switch between monadic wrappers
  -- (>>=) :: Monad m => ma -> (a -> mb) -> mb

-- lines is useful
  -- its like words but instead of using spaces it uses \n
  -- unlines takes a list of Strings and concats them interspersed with \n
  -- NOTE: Data.List.intersperse a bs puts a inbetween each element of bs
  -- You can print a whole list of strings using (putStr . unlines)

-- getContents takes the entire input lines n'all
  -- use lines <$> getContents to make a list of all the lines inputted
  -- NOTE: lines <$> getContents :: IO [String]

-- you DONT need to start a do statement if you only have one line (of, for example, IO)

-- if you're about to use an accumulating parameter with a helper function that produces lists, you can do without it
  -- instead of:
    binary x
      = binary x []
      where
        binary n acc
          = binary (n-1) (smth : acc)
  -- you can just write
    binary x
      = smth : binary (x-1)

-- Data.Map.Lazy is very useful when dealing with [(a, b)] i.e. lookup tables
  -- NOTE: fromList removes duplicate mappings by using the FIRST ONE IT FINDS
    -- e.g. fromList [('a', 1), ('a', 2)] = fromList [('a', 1)]
    -- Insert counteracts this; it updates the table
    -- e.g. insert 'a' 2 (fromList [('a', 1)]) = fromList [('a', 2)]

-- Data.Set is very useful when dealing with large lists ([])
  -- NOTE: You want to be importing this with an alias; clashes with prelude brutally
  -- fromList turns a list into a set, O(n*Log n)
  -- the function size has O(1) and returns the length of the list
  -- member checks if an element is in the list, O(Log n)

-- Data.Ix is good for making lists from ranges (better than the enum thing; [1..5])
  -- range (1,5) is the same as [1..5]
  -- range ((1,1),(3,3)) makes a grid; same as [(x,y) | x <- [1..3], y <- [1..3]]
  -- index tells you the index of an element in a range
  -- rangeSize tells you the length of the range

-- Data.Char has ord
  -- ord 'a' is 98 or 97

-- cat input.txt | runhaskell yourprogram.hs


-- WARNING: This is a bit of an abstract tip;
  -- when dealing with problems that use lists, try to think whether pattern matching (x:xs) or maps/folds will be best
  -- maps are good sometimes because they cover more patterns
  -- pattern matches are good when youre gonna have maps within maps
